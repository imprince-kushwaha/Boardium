const onDragEnd = async (result) => {
  const { source, destination } = result;
  if (!destination) return;

  const sourceCol = data.columns[source.droppableId];
  const destCol = data.columns[destination.droppableId];
  const sourceTasks = [...sourceCol.tasks];
  const [movedTask] = sourceTasks.splice(source.index, 1);

  if (source.droppableId === destination.droppableId) {
    sourceTasks.splice(destination.index, 0, movedTask);
    const newCol = {
      ...sourceCol,
      tasks: sourceTasks,
    };
    setData({
      ...data,
      columns: {
        ...data.columns,
        [newCol.id]: newCol,
      },
    });
  } else {
    const destTasks = [...destCol.tasks];
    destTasks.splice(destination.index, 0, movedTask);

    // Update frontend state
    setData({
      ...data,
      columns: {
        ...data.columns,
        [sourceCol.id]: { ...sourceCol, tasks: sourceTasks },
        [destCol.id]: { ...destCol, tasks: destTasks },
      },
    });

    // 🔁 Notify backend of the change
    try {
      await fetch(`http://localhost:3000/tasks/${movedTask.id}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ status: destination.droppableId }),
      });
    } catch (error) {
      console.error("Failed to update task status", error);
    }
  }
};

 Backend Code to Handle Status Update
// PUT /tasks/:id
router.put("/:id", async (req, res) => {
  const { id } = req.params;
  const { status } = req.body;

  try {
    const task = await Task.findByPk(id);
    if (!task) return res.status(404).json({ error: "Task not found" });

    await task.update({ status }); // ✅ this saves the new column
    res.json(task);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});
// MAY load all tasks from the backend like this:
useEffect(() => {
  fetch("http://localhost:3000/tasks")
    .then((res) => res.json())
    .then((tasks) => {
      const columns = {
        todo: { ...initialData.columns.todo, tasks: [] },
        inProgress: { ...initialData.columns.inProgress, tasks: [] },
        done: { ...initialData.columns.done, tasks: [] },
      };

      tasks.forEach((task) => {
        columns[task.status]?.tasks.push(task);
      });

      setData({ columns });
    });
}, []);


// routes/tasks.js
const express = require("express");
const router = express.Router();
const Task = require("../models/Task");

// Get all tasks
router.get("/", async (req, res) => {
  const tasks = await Task.findAll();
  res.json(tasks);
});

// Create new task
router.post("/", async (req, res) => {
  const { title, description, icon, status } = req.body;
  try {
    const task = await Task.create({ title, description, icon, status });
    res.status(201).json(task);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

// Update task
router.put("/:id", async (req, res) => {
  const { id } = req.params;
  const { title, description, icon, status } = req.body;
  try {
    const task = await Task.findByPk(id);
    if (!task) return res.status(404).json({ error: "Task not found" });

    await task.update({ title, description, icon, status });
    res.json(task);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

// Delete task
router.delete("/:id", async (req, res) => {
  const { id } = req.params;
  try {
    const task = await Task.findByPk(id);
    if (!task) return res.status(404).json({ error: "Task not found" });

    await task.destroy();
    res.json({ message: "Task deleted" });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

module.exports = router;





const createAdmin = async (req, res) => {
  const currentUser = req.user; // Assume you use JWT or session to identify current user

  if (currentUser.role !== "superadmin") {
    return res.status(403).json({ message: "Access denied" });
  }

  const { name, emailId, password, role } = req.body;

  if (!["admin", "superadmin"].includes(role)) {
    return res.status(400).json({ message: "Invalid role" });
  }

  const newAdmin = await Register.create({
    name,
    emailId,
    password,
    role,
  });

  res.status(201).json({ message: `${role} created`, user: newAdmin });
};




See this is what I got confused when writing migartions it craetes table columns then what is use of writing same code to models?
Answer is in Migartion it creates only table and using seed can push data but with the help of models we can interact with it as mentioned below

And one more thing as in model if we do not use freezeTableName:true then it pluralizes our table name but not necessary to use same this plural name 
in migration model name can use with or without 's' too but as for good practice use plural name so it matches with model but  not necessary...

Whenever we migrate any file, the file name get logged to SequelizeMeta(we can rename it too) and when undo migrate it get remove from SequelizeMeta so that's how
it works and find miagrate


| **You Have...**                         | **Result**                                                                   |
| --------------------------------------- | ---------------------------------------------------------------------------- |
| ✅ Migrations, ❌ Models                  | DB tables created, but no way to use them in your app unless you use raw SQL |
| ✅ Models, ❌ Migrations + `sync()`       | Sequelize creates tables automatically (not recommended for production)      |
| ✅ Migrations + ✅ Models (best practice) | Tables are created via migration, and models help query/update them in code  |













'use strict';

const { DataTypes } = require('sequelize');

/** @type {import('sequelize-cli').Migration} */
module.exports = {
  async up (queryInterface, Sequelize) {
    /**
     * Add altering commands here.
     *
     * Example:
     * await queryInterface.createTable('users', { id: Sequelize.INTEGER });
     */

    await queryInterface.createTable("Register", {
      name: {
        type: DataTypes.STRING,
        allowNull: false,
      },
      emailId: {
        type: DataTypes.STRING,
        allowNull: false,
        unique: true,
        validate: {
          isEmail: true,
        },
      },
      password: {
        type: DataTypes.STRING,
        allowNull: false,
      },
      role: {
        type: DataTypes.INTEGER,
        defaultValue: 3,
        comment: "1 = Superadmin, 2 = Admin, 3 = User",
      },
      active: {
        type: DataTypes.BOOLEAN,
        defaultValue: true,
      },
       createdAt: {
        allowNull: false,
        type: Sequelize.DATE,
      },
      updatedAt: {
        allowNull: false,
        type: Sequelize.DATE,
      },
    });
  },

//   async down(queryInterface, Sequelize) {
//      /**
//      * Add reverting commands here.
//      *
//      * Example:
//      * await queryInterface.dropTable('users');
//      */
//   const tableNames = await queryInterface.showAllTables();

//   if (tableNames.includes('Registers')) {
//     await queryInterface.dropTable('Register');
//   } else {
//     console.warn("Table 'Register' does not exist. Skipping drop.");
//   }
// }
async down(queryInterface, Sequelize) {
  const tableNames = await queryInterface.showAllTables();
  const targetTable = 'Register';

  if (!tableNames.includes(targetTable)) {
    // Stop revert and keep migration in SequelizeMeta
    throw new Error(`⛔ Cannot revert migration: table '${targetTable}' does not exist.`);
  }

  // Safe to drop
  await queryInterface.dropTable(targetTable);
}


};



async up(queryInterface, Sequelize) {
    const tableName = 'category';
    const tableExists = await queryInterface.describeTable(tableName).then(() => true).catch(() => false);
    if (!tableExists) {
      ////do you code here
    }  
    else{
      //log your message
    } 
  }